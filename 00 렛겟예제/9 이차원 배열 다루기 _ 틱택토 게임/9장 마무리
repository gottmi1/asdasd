1. 이차원 배열

  배열 안에 배열이 있을 때 그것을 이차원 배열이라고 한다.
  배열이 몇 중첩이 되었느냐에 따라 몇 차원배열인지가 정해진다.
  표와 비슷한 모양이서 실무에서 많이 사용함.

    표) [
      [null, 'x', null],
      ['x' , null, 'x'],
      [null, 'o' , 'x'],
    ]

2. 구조분해 할당

  객체 내부의 속성과 할당하는 변수명이 같을 때 다음과 같이 줄여서 쓸수 있다.

    const { bodt } = document;
    ==
    const bodt = document.body;

  여러 속성을 한 번에 변수에 할당할 수도 있다.

    const obj = { a:1 , b:2}; //객체
    cosnt { a, b } = obj; // 아래의 두 줄을 이렇게 한 줄로 요약할 수 있는 것.
    const a = obg.a;
    const b = obg.b;

  9장 에서는 나오지 않았지만 배열도 다음과 같이 줄여서 쓸 수 있다.

    const array = [1,2,5];
    const [one ,two five] = array; // 다음 세 줄을 이렇게 표현할 수 있다.
    const one = array[0];
    const two = array[1];
    const five = array[2];

3. 이벤트 버블링 

  이벤트 버블링(event bubbling)은 이벤트가 발생할 때 부모 태그에도 동일한 이벤트가 발생하는 현상을 말한다.
  td의 부모태그는 tr이고, tr의 부모 태그는 table이기 때문에 td태그를 클릭하여 td태그에 click이벤트가 발생하면 td의 부모인 tr과 그 부모인 table까지도 이벤트가 발생하는 것.
  즉 td태그의 click이벤트는 table까지 전달된다.

  이벤트 버블링 현상이 일어나면 이벤트 리스너 콜백함수의 evnet.target은 이벤트가 발생한 태그로 바뀌므로 주의해야한다.(이 경우 td로 바뀌겠지)
  이벤트가 발생한 태그가 아닌 이벤트를 연결한 태그에 접근하고 싶다면 event.currentTarget을 사용해야 한다. 

4. parentNode와 children

  현재 태그의 부모 태그를 찾고 싶을 때는 parentNode를 사용한다. 다음과 같은 HTML이 있을 때

    HTML)
    <table>
      <tr>
        <td id = "td00"></td>
        <td id = "td01"></td>
        <td id = "td02"></td>
      </tr>
    </table>

  tr의 부모태그는 table태그이다.(걍 당연한 말)

    document.querySelector('tr').parentNode; // document.querySelector('table'); 과 같음

  자식 태그를 찾으려면 속성 .children을 사용해야한다.
  자식태그는 여러개일 수 있으므로 children속성은 배열모양의 값을 가지게 된다.
  단 진짜 배열은 아니고 유사 배열 객체(배열같은 모양의 객체)이다.

    document.querySelector('tr').children; // {0 : td, 1: td, 2: td}; 배열은 [] 를 사용하는데 유사 배열 객체이기 때문에 {}을 사용


5. rowindex와 cellindex

  tr태그는 몇 번째 줄인지 알려주는rowIndex라는 속성을 제공하고, td태그는 몇 번째 칸인지 알려주는 cellIndex라는 속성을 제공한다.
  
    const rowIdnex = $tr.rowIndex;
    const cellIdnex = $td.cellIndex;

  그냥 tr은 rowIndex td는 cellIndex 외우는 게 편할 것 같다.



6. 유사 배열객체와 Array.from

  4번에 나온 children속성 같은 배열모양의 객체를 유사 배열 객체(array-like object)라고 한다.
  배열이 아니므로 배열 메서드를 사용할수가 없다. 
  배열 메서드를 사용하고싶다면 Array.from을 사용해 배열으로 바꿔줘야 한다.

    Array.from($tr.children).indexOf($td);

  문자열 Array.from 메서드를 사용해 배열로 바꿀 수 있다.

    Array.from('123'); // ['1','2','3']; 

7. every와 some 

  배열에서 모든 값이 조건에 해당하는지 판단하려면, every메서드를 사용하고, 하나라도 조건에 해당하는지 판단하려면 some을 사용하면 된다.
  
    배열.every(조건함수);
    배열.some((어쩌구) => 저쩌구);

  일반 반복문을 사용하면 마지막까지 반복을 수행하지만, every와 some은 조건을 충족하는지, 혹은 충족하지 않는지 판단하면 멈추므로 효율적인 경우가 많다.
  every는 하나라도 조건을 만족하지 않는 요소(조건함수의 리턴값이 false인 경우)가 있으면 멈추고, some은 하나라도 조건을 만족하는 요소 (조건 함수의 리턴값이 true인 경우)가 있으면 멈춘다.

8. flat

  flat은 배열의 차원을 한 단계 낮춰주는 메서드이다.
  n차원 배열을 n-1차원 배열로 바꿔준다. 차원을 낮추는 행위가 배열을 평평하게 만드는 것처럼 보여서 flat이라는 이름이 붙었다.
  일차원 배열에는 효과가 없음.

    const array = [[1,2,3],[4,5,6,],[7,8,9]];
    array.flat(); // [1,2,3,4,5,6,7,8,9];
    const array2 = [1,2,3,[[4,5,6],[7,8,9,]]];
    array.flat(); // [1,2,3,[4,5,6,],[7,8,9]]; 